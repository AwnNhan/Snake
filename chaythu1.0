#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <conio.h>
#include <time.h>

#define WIDTH 79
#define HEIGHT 24
#define MAX_LENGTH 100

// Snake body positions
int snakeX[MAX_LENGTH], snakeY[MAX_LENGTH];
int length = 1; // Initial snake length

int foodX, foodY;
int score = 0;
char direction = 'd'; // Start moving right

void gotoxy(int x, int y) {
    COORD pos = {x, y};
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

void generateFood() {
    foodX = rand() % (WIDTH - 1) + 1;
    foodY = rand() % (HEIGHT - 1) + 1;
    gotoxy(foodX, foodY);
    printf("o");
}

void draw_snake() {
    for (int i = 0; i < length; i++) {
        gotoxy(snakeX[i], snakeY[i]);
        if (i == 0)
            printf("O"); // Head
        else
            printf("#"); // Body
    }
}

void erase_snake() {
    for (int i = 0; i < length; i++) {
        gotoxy(snakeX[i], snakeY[i]);
        printf(" ");
    }
}

void displayScore() {
    gotoxy(0, 0);
    printf("Score: %d", score);
}

void snake_init() {
    length = 1;
    snakeX[0] = WIDTH / 2;
    snakeY[0] = HEIGHT / 2;
    system("cls");
    draw_snake();
    generateFood();
    displayScore();
}

int check_collision(int x, int y) {
    // Check collision with wall
    if (x <= 0 || x >= WIDTH || y <= 0 || y >= HEIGHT)
        return 1;
    // Check collision with self
    for (int i = 1; i < length; i++) {
        if (snakeX[i] == x && snakeY[i] == y)
            return 1;
    }
    return 0;
}

void snake_move() {
    // Direction change
    if (_kbhit()) {
        char key = _getch();
        // Only allow direction change if not direct reverse
        if ((key == 'w' || key == 'W') && direction != 's') direction = 'w';
        else if ((key == 's' || key == 'S') && direction != 'w') direction = 's';
        else if ((key == 'a' || key == 'A') && direction != 'd') direction = 'a';
        else if ((key == 'd' || key == 'D') && direction != 'a') direction = 'd';
    }

    // Move body
    for (int i = length - 1; i > 0; i--) {
        snakeX[i] = snakeX[i - 1];
        snakeY[i] = snakeY[i - 1];
    }

    // Move head
    if (direction == 'w') snakeY[0]--;
    else if (direction == 's') snakeY[0]++;
    else if (direction == 'a') snakeX[0]--;
    else if (direction == 'd') snakeX[0]++;

    // Check collision
    if (check_collision(snakeX[0], snakeY[0])) {
        gotoxy(WIDTH / 2 - 5, HEIGHT / 2);
        printf("GAME OVER!");
        Sleep(2000);
        exit(0);
    }

    // Eat food
    if (snakeX[0] == foodX && snakeY[0] == foodY) {
        if (length < MAX_LENGTH) length++;
        score++;
        generateFood();
    }

    displayScore();
    draw_snake();
}

int main() {
    srand((unsigned int)time(NULL));
    snake_init();

    while (1) {
        erase_snake();
        snake_move();
        Sleep(100); // Smooth movement
    }
    return 0;
}
